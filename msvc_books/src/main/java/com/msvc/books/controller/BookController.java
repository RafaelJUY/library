package com.msvc.books.controller;

import com.msvc.books.dto.AuthorDto;
import com.msvc.books.dto.BookDto;
import com.msvc.books.exception.ModelKeyAutogeneratedException;
import com.msvc.books.exception.ModelNotFoundException;
import com.msvc.books.model.entity.AuthorEnt;
import com.msvc.books.model.entity.BookAuthor;
import com.msvc.books.model.entity.BookEnt;
import com.msvc.books.service.IAuthorService;
import com.msvc.books.service.IBookAuthorService;
import com.msvc.books.service.IBookService;
import com.msvc.books.service.convert.entityToDto.IAuthorConverter;
import com.msvc.books.service.convert.entityToDto.IBookConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/books")
public class BookController {
    @Autowired
    private IBookService bookService;

    @Autowired
    private IBookConverter<BookEnt, BookDto> bookConverter;

    @Autowired
    private IBookAuthorService bookAuthorService;

    @Autowired
    private IAuthorConverter<AuthorEnt, AuthorDto> authorConverter;

    @Autowired
    private IAuthorService authorService;


    @GetMapping("/{id}")
    public ResponseEntity<BookDto> findById(@PathVariable Integer id) throws Exception {
        Optional<BookEnt> bookOp = bookService.findById(id);
        if (bookOp.isEmpty()) {
            throw new ModelNotFoundException("ID NOT FOUND ".concat(id.toString()));
        }
        BookEnt bookEnt = bookOp.get();
        BookDto bookDto = bookConverter.entityToDto(bookEnt);

        bookDto.setAuthors(authorConverter.entityListToDtoList(findAuthors(bookEnt)));

        return ResponseEntity.status(HttpStatus.OK).body(bookDto);
    }

    @GetMapping("/find-title")
    public ResponseEntity<List<BookDto>> findByTitle(@RequestParam(name = "title") String title) throws Exception{
        if(title.isEmpty() || title.isBlank()){
            throw new Exception("invalid title value");
        }
        return ResponseEntity.ok(findAuthors(bookService.findByTitle(title)));
    }

    @GetMapping
    public ResponseEntity<List<BookDto>> findAll() throws Exception {
        return ResponseEntity.ok(findAuthors(bookService.findAll()));
    }

    @GetMapping("/pagination")
    public ResponseEntity<List<BookDto>> findAllPage(
            @RequestParam(name = "page", defaultValue = "0") int page,
            @RequestParam(name = "size", defaultValue = "5") int size) throws Exception {
        PageRequest pageRequest = PageRequest.of(page, size);
        List<BookEnt> bookEntList = bookService.findAllPage(pageRequest).get().collect(Collectors.toList());
        List<BookDto> bookDtoList = findAuthors(bookEntList);


        return ResponseEntity.ok(bookDtoList);
    }

    private List<BookDto> findAuthors(List<BookEnt> bookEntList){
        return bookEntList.stream()
                .map(bookEnt -> {
                    BookDto bookDto = bookConverter.entityToDto(bookEnt);
                    bookDto.setAuthors(authorConverter.entityListToDtoList(findAuthors(bookEnt)));
                    return bookDto;
                }).collect(Collectors.toList());
    }
    private List<AuthorEnt> findAuthors(BookEnt bookEnt) {
        return bookAuthorService.findAuthors(bookEnt);
    }


    @PostMapping
    public ResponseEntity<BookDto> save(@RequestBody BookDto bookDto) throws Exception {
        if (bookDto.getIdBook() != null){
            throw new ModelKeyAutogeneratedException("The primary key is autogenerated: "
                    .concat(bookDto.getIdBook().toString()));
        }
        BookEnt bookEnt = bookConverter.dtoToEntity(bookDto);

        return ResponseEntity.status(HttpStatus.CREATED).body(bookConverter.entityToDto(bookService.save(bookEnt)));
    }

    @PutMapping("assign-authors/{id-book}")
    public ResponseEntity<Void> assignAuthors(@PathVariable(name = "id-book") Integer idBook
            , @RequestParam List<Integer> idsAuthors) throws Exception{
        if (!(bookService.existsById(idBook) && checkAuthorsByIds(idsAuthors))){
            throw new ModelNotFoundException("book and/or authors do not exist");
        }

        BookEnt bookEnt = bookService.findById(idBook).get();
        List<AuthorEnt> authorEntList = authorService.findAllById(idsAuthors);

        for (AuthorEnt authorEnt : authorEntList) {
            BookAuthor bookAuthor = new BookAuthor(authorEnt, bookEnt);
            bookAuthorService.save(bookAuthor);
        }

        return ResponseEntity.ok().build();
    }

    private boolean checkAuthorsByIds(List<Integer> ids){
        return authorService.existsAllById(ids);
    }

    @PutMapping("/{id}")
    public ResponseEntity<BookDto> update(@RequestBody BookDto bookDto, @PathVariable Integer id) throws Exception {
        BookEnt bookEnt = bookConverter.dtoToEntity(bookDto);
        bookEnt.setIdBook(id);
        if (!bookService.existsById(id)) {
            throw new ModelNotFoundException("ID NOT FOUND ".concat(id.toString()));
        }

        return ResponseEntity.ok(bookConverter.entityToDto(bookService.save(bookEnt)));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteById(@PathVariable Integer id) throws Exception {
        if (!bookService.existsById(id)) {
            throw new ModelNotFoundException("ID NOT FOUND ".concat(id.toString()));
        }
        BookEnt bookEnt = bookService.findById(id).get();
        List<AuthorEnt> authorEntList = bookAuthorService.findAuthors(bookEnt);

        authorEntList
                .forEach(authorEnt ->bookAuthorService.delete(new BookAuthor(authorEnt, bookEnt)));

        bookService.deleteById(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }

}
