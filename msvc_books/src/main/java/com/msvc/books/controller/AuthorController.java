package com.msvc.books.controller;

import com.msvc.books.dto.AuthorDto;
import com.msvc.books.exception.ModelKeyAutogeneratedException;
import com.msvc.books.exception.ModelNotFoundException;
import com.msvc.books.model.entity.AuthorEnt;
import com.msvc.books.service.IAuthorService;
import com.msvc.books.service.convert.entityToDto.IAuthoConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/authors")
public class AuthorController {
    @Autowired
    private IAuthorService service;
    @Autowired
    private IAuthoConverter<AuthorEnt, AuthorDto> convert;

    @GetMapping("/{id}")
    public ResponseEntity<AuthorDto> findById(@PathVariable Integer id) throws Exception{
        Optional<AuthorEnt> authorOp = service.findById(id);
        if (authorOp.isEmpty()){
            throw new ModelNotFoundException("ID NOT FOUND ".concat(id.toString()));
        }
        return ResponseEntity.ok(convert.entityToDto(authorOp.get()));
    }

    @GetMapping
    public ResponseEntity<List<AuthorDto>> findAll() throws Exception{
        return ResponseEntity.ok(convert.entityListToDtoList(service.findAll()));
    }

    @PostMapping
    public ResponseEntity<AuthorDto> save(@RequestBody AuthorDto authorDto) throws Exception{
        AuthorEnt authorEnt = convert.dtoToEntity(authorDto);

        if (authorEnt.getIdAuthor() != null){
            throw new ModelKeyAutogeneratedException("The primary key is autogenerated: ".concat(authorEnt.getIdAuthor().toString()));
        }

        return ResponseEntity.status(HttpStatus.CREATED).body(convert.entityToDto(service.save(authorEnt)));
    }

    @PutMapping("/{id}")
    public ResponseEntity<AuthorDto> update(@PathVariable Integer id, @RequestBody AuthorDto authorDto) throws Exception{
        if (!service.existsById(id)){
            throw new ModelNotFoundException("ID NOT FOUND ".concat(id.toString()));
        }

        AuthorEnt authorEnt = convert.dtoToEntity(authorDto);
        authorEnt.setIdAuthor(id);

        return ResponseEntity.ok(convert.entityToDto(service.save(authorEnt)));

    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteById(@PathVariable Integer id) throws Exception{
        if (!service.existsById(id)){
            throw new ModelNotFoundException("ID NOT FOUND ".concat(id.toString()));
        }
        service.deleteById(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }

}
