package com.msvc.books.controller;

import com.msvc.books.dto.AuthorDto;
import com.msvc.books.exception.ModelKeyAutogeneratedException;
import com.msvc.books.exception.ModelNotFoundException;
import com.msvc.books.model.entity.AuthorEnt;
import com.msvc.books.model.entity.BookAuthor;
import com.msvc.books.model.entity.BookEnt;
import com.msvc.books.service.IAuthorService;
import com.msvc.books.service.IBookAuthorService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

import static com.msvc.books.service.convert.entityToDto.BookConverter.*;
import static com.msvc.books.service.convert.entityToDto.AuthorConverter.*;

@RestController
@RequestMapping("/authors")
public class AuthorController {
    @Autowired
    private IAuthorService authorService;

    @Autowired
    private IBookAuthorService bookAuthorService;

    @GetMapping("/{id}")
    public ResponseEntity<AuthorDto> findById(@PathVariable Integer id) throws Exception{
        AuthorEnt authorEnt = authorService.findById(id);
        AuthorDto authorDto = entityToDto(authorEnt);

        authorDto.setBooks(entityListToDtoList(findBooks(authorEnt)));

        return ResponseEntity.ok(authorDto);
    }


    private List<BookEnt> findBooks(AuthorEnt authorEnt){
        return bookAuthorService.findBooks(authorEnt);
    }


    @GetMapping
    public ResponseEntity<List<AuthorDto>> findAll() throws Exception{
        return ResponseEntity.ok(entityListToDtoList(authorService.findAll()));
    }

    @PostMapping
    public ResponseEntity<AuthorDto> save(@Valid @RequestBody AuthorDto authorDto) throws Exception{
        AuthorEnt authorEnt = dtoToEntity(authorDto);

        if (authorEnt.getIdAuthor() != null){
            throw new ModelKeyAutogeneratedException("The primary key is autogenerated: "
                    .concat(authorEnt.getIdAuthor().toString()));
        }

        return ResponseEntity.status(HttpStatus.CREATED).body(entityToDto(authorService.save(authorEnt)));
    }

    @PutMapping("/{id}")
    public ResponseEntity<AuthorDto> update(@PathVariable Integer id,
                                            @Valid @RequestBody AuthorDto authorDto) throws Exception{
        if (!authorService.existsById(id)){
            throw new ModelNotFoundException("ID NOT FOUND ".concat(id.toString()));
        }

        AuthorEnt authorEnt = dtoToEntity(authorDto);
        authorEnt.setIdAuthor(id);

        return ResponseEntity.ok(entityToDto(authorService.save(authorEnt)));

    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteById(@PathVariable Integer id) throws Exception{
        if (!authorService.existsById(id)){
            throw new ModelNotFoundException("ID NOT FOUND ".concat(id.toString()));
        }
        AuthorEnt authorEnt = authorService.findById(id);
        List<BookEnt> books = bookAuthorService.findBooks(authorEnt);
        books.forEach(book -> bookAuthorService.delete(new BookAuthor(authorEnt, book)));

        authorService.deleteById(id);
        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();
    }

}
